version=" "; // $Id$
category=" ";
info="
LIBRARY:  resbinomial_neu.lib 
AUTHOR:  Sabrina A. Gaube, sabrina.gaube@uol.de

PROCEDURES:
	resbinomial2(ideal J); resolves a binomial ideal J

	DescendInDimension(list BO); calculates the coefficient ideals; apply induction on dimension 
	descend_finished(list CoeffBO); checks whether the descend in dimension is finished
	isSmooth(list BO);	checks whether BO[2] is smooth.  
	
	SuccessorsCharts(list BO, ideal cent, int chartnumber); blow up method which fill the necessary data in the successor chart
	
	proc UpdateBO7(intvec new_b,intvec old_b,list BO);	update the information about the interesting exceptional divisors
";


LIB "resolve2.lib";

proc resbinomial2(ideal J)
"USAGE: resbinomial2(ideal J); resolves a binomial ideal J
RETURN: a list of final charts and whole charts of the resolution process
EXAMPLE: example resbinomial2; shows an example
"
{
	def r = basering;
	list BlowUpTree;
	BlowUpTree[1] = r;
	list EndCharts = list();
	int i,j,k;
	
	list BO = createBO(J);
	list descend = DescendInDimension(BO);
	list descend_BOlist = descend[1];
	intvec b = descend[2];
	//ideal center = resbinomialCenter(BO,b);
	ideal center = descend_BOlist[size(descend_BOlist)][2];
	//TODO:blowup und fill successormethode
	BlowUpTree = BlowUpTree + SuccessorsCharts(BO, center, 1);
	//TODO
	for(i=2; i<= size(BlowUpTree); i++){
		if(defined(actual_chart)){kill actual_chart;} 
		def actual_chart = L[i];
		setring(actual_chart);

		list descend = DescendInDimension(BO);
		list descend_BOlist = descend[1];
		intvec b_new = descend[2];
		UpdateBO7(b_new,b,BO);					//TODO
		b = b_new;
		//ideal center = resbinomialCenter(BO,b);
		ideal center = descend_BOlist[size(descend_BOlist)][2];
		if(finished(BO)){
			EndCharts[size(EndCharts)+1] = BlowUpTree[i];
		}else{
			BlowUpTree = BlowUpTree + SuccessorsCharts(BO, center, i);
		}
	}
	
	
	
	return(EndCharts,BlowUpTree);
}


proc DescendInDimension(list BO)
"USAGE: DescendInDimension(list BO); calculates the coefficient ideals; apply induction on dimension 
RETURN: a list basic objects corresponding to the different coefficient ideals and an intvec b with the values of the correspoding orders 
EXAMPLE: example DescendInDimension; shows an example
"{
	list CoeffBOList;
	CoeffBOList[1] = BO;
	intvec b;
	list BOtmp = BO;
	
	list DList = DeltaList(BOtmp);
	int btmp = size(DList);
	b[size(b)+1]  = btmp;
		
	
	while(descend_finished(CoeffBOList[size(CoeffBOList)]) == 0){				
		BOtmp = Coeff(BOtmp,b);
		CoeffBOList[size(CoeffBOList)+1] = BOtmp;
		//TODO Schneiden! inters_E
		DList = DeltaList(BOtmp);
		btmp = size(DList);
		b[size(b)+1]  = btmp;
	}
	//CoeffBOList[size(CoeffBOList)][2] should contain the ideal of center
	return(CoeffBOList,b);						//TODO: Schauen, ob wir oberstes BO auch in der Liste haben wollen
		
}

proc descend_finished(list CoeffBO)
"USAGE: descend_finished(list CoeffBO); requires the last coefficient basic object as input 
RETURN: 0, if the descend is not finished, 1 if the potential center  is a point, 2 if the input was zero, 3 if the correct center was calculated in the step before, 4 if the potential center is smooth and snc with the exceptional divisors
EXAMPLE: example descend_finished; shows an example
"{						
	if(dim(std(CoeffBO[2])) == 0){							// point -> correct center
		return(1);
	}
	if(EqualityOfIdeal(CoeffBO[2],0) == 1){					// input was zero
		return(2);
	}
	if(EqualityOfIdeal(CoeffBO[2],1) == 1){					// correct center was calculated in the step before
		return(3);
	}
	if(isSmooth(CoeffBO) and normalCross(CoeffBO[2],CoeffBO[4])){			// isSmooth(C) and snc(C,E);
		return(4);
	}
	return(0);												// not finished
}

proc isSmooth(list BO)
"USAGE: isSmooth(list BO); checks whether BO[2] is smooth 
RETURN: 1, if it is smooth, 0 otherwise
EXAMPLE: example isSmooth; shows an example
"
{								//TODO: so oder anders?
	list DList = DeltaList(BO);
	if(size(DList) == 1){
		return(1);
	}
	return(0);
}


//Blowing up each of the data and mapping each of it into new successor ring:
proc SuccessorsCharts(list BO, ideal cent, int chartnumber)
"USAGE: SuccessorsCharts(list BO, ideal cent, int chartnumber); Basic object BO, center cent and the number of the current chart chartnumber
RETURN: a list of successor charts with the corresponding data
EXAMPLE: example SuccessorsCharts; shows an example
"
{	
	int i,j,k,n;

	def r = basering;
	list successor_list = list();
	//TODO define: int numb_predecessor for the path matrix 
	// intmat path [2][numb_predecessor+1];
	successor_list = blowUpBO(BO,cent,2);
	int Numb_sucessors = size(successor_list);
	
	

	// construct successorlist
	for(j = 1;j<=Numb_center_components; j++){
		if(defined(newring)){kill newring;}
		def newring = successor_list[j];
		setring(newring);
		n = nvars(basering);
		tmp_n = n;
		map BlowUpMap = r,bM;
		//TODO: Was muss alles Ã¼bertragen werden?
		ideal last_map = bM;
		ideal total_map = BlowUpMap(total_map);
		def path = imap(r,path);
		path=path,[chartnumber,j];
		//TODO: mehr exportieren?
		export(path);
		export(last_map);
		export(total_map);
	}

	setring(r);
	
	if(defined(newring)){kill newring;}	
	return(successor_list);
}





proc UpdateBO7(intvec new_b,intvec old_b,list BO){
	int i,j;
	// ersetze BO-list im Input durch den gesamten Abstieg? -> Dann ist hier auch klar, dass wir das originale BO in der Abstiegsliste brauchen
	list E = BO[4]; // TODO!!!! wir brauchen eigentlich das 'richtige E' von position b_decrease_pos hier!!!!

	
	//finding position in b_new where the order drops
	int b_decrease_pos; 
	for(i=1;i<=size(b_new);i++){
		if(b_new[i] < b_old){
			b_decrease_pos = i;
		}
	}
	//if b_new is shorter than b_old???
	if(b_decrease_pos == 0){print("Ordnung ist nicht gefallen!"); ~;}
	

	intvec BO7 = BO[7];
	intvec newBO7;
	//copy first values of BO7 where the order is constant
	for(i = 1; i<b_decrease_pos; i++){
		newBO7[i] = BO7;
	}
	
	//TODO
	//set BO[7][b_decrease_pos]
	newBO7[b_decrease_pos] = size(E);
	
	//update last values of BO[7]
	for(i = b_decrease_pos +1; i<= size(b_new);i++){
		newBO7[i] = -1;
	}	
	
	BO[7] = newBO7;
	return(BO)
}

proc resbinomialCenter(list BO,intvec b){
	//not necessary because its the second entry of the last BO...
}
