version=" "; // $Id$
category=" ";
info="
LIBRARY:  resbinomial_neu.lib 
AUTHOR:  Sabrina A. Gaube, sabrina.gaube@uol.de

PROCEDURES:
	resbinomial2(ideal J); resolves a binomial ideal J
	
	updateAmbientSpace(list BO); put generator of the form 1-x^A in the ambient space
	DescendInDimension(list BO); calculates the coefficient ideals; apply induction on dimension 
	descend_finished(list CoeffBO); checks whether the descend in dimension is finished
	
	monomialCase(list BO, list DList); monomial case of Bravo, Encinas and Villamayor
	
	isSmooth(list BO);	checks whether BO[2] is smooth.  
	SuccessorsCharts(list BO, ideal cent, int chartnumber); blow up method which fill the necessary data in the successor chart
	
";


LIB "resolve2.lib";
LIB "maxord.lib";


proc resbinomial2(ideal J)
"USAGE: resbinomial2(ideal J); resolves a binomial ideal J
RETURN: a list of final charts and whole charts of the resolution process
EXAMPLE: example resbinomial2; shows an example
"
{
	def r = basering;
	module path = [0,-1];										//path of the current chart, autoconverted to matrix
	export(path);
	list BlowUpTree;
	BlowUpTree[1] = r;
	list EndCharts = list();
	int i,j,k;
	
	list BO = createBO(J);
	list descend = DescendInDimension(BO,1);
	list descend_BOlist = descend[1];
	intvec b = descend[2];
	BO = descend_BOlist[1];
	ideal center = descend[3];

	if(EqualityOfIdeal(center,1) == 1){								
		EndCharts[1] = BlowUpTree[1];
	}else{
		BlowUpTree = BlowUpTree + SuccessorsCharts(descend_BOlist[1], center, 1);
		//center;
	}
	for(i=2; i<= size(BlowUpTree); i++){
		if(defined(actual_chart)){kill actual_chart;} 
		def actual_chart = BlowUpTree[i];
		setring(actual_chart);

		if(isSmooth(BO[2]) == 1){
			ideal center = 1;		//finished
		}else{	
			list descend = DescendInDimension(BO,i);
			list descend_BOlist = descend[1];
			intvec b_new = descend[2];
			ideal center = descend[3];
						
		}

		if(EqualityOfIdeal(center,1) == 1){								
			EndCharts[size(EndCharts)+1] = BlowUpTree[i];
		}else{
			BlowUpTree = BlowUpTree + SuccessorsCharts(descend_BOlist[1], center, i);
		}
	}

	
	return(EndCharts,BlowUpTree);
}example{
	"EXAMPLE:"; echo = 2;
	ring r = 0,(x,y,z),dp;
	ideal J = z3-x2y2;
	resbinomial2(J);
}

proc updateAmbientSpace(list BO)
"USAGE: updateAmbientSpace(list BO); put generators of  J of the form 1-x^A to the ambient space
RETURN: a list of fthe basic object and the already calculated Deltalist
EXAMPLE: no example  
"{
	int j,k;
	list DList = DeltaList(BO);
	list tmpBO = BO;
	list DListtmp;

	for(j = 1;j<=size(BO[2]);j++){
		if(size(DList) == 1){
			tmpBO[2] = BO[2][j];
			DListtmp = DeltaList(tmpBO);
			if(size(DListtmp) == 1){
				BO[1] = BO[1]+ tmpBO[2];
				if(size(BO[2]) > 1){
					BO[2] = delete(BO[2],j);
					DList = DeltaList(BO);
					j--;
				}else{
					BO[2] = 0;
					break;
				}
			}
		}
	}
	return(BO,DList);
}


proc DescendInDimension(list BO, int chartnumber) 
"USAGE: DescendInDimension(list BO); calculates the coefficient ideals; apply induction on dimension 
RETURN: a list basic objects corresponding to the different coefficient ideals and an intvec b with the values of the correspoding orders 
EXAMPLE: no example 
"{
	int j,k;
	list CoeffBOList;
	list tmpBOlist = updateAmbientSpace(BO);
	if(tmpBOlist[1][2] == 0){												
		return(tmpBOlist,1,tmpBOlist[1][1],ideal(0),ideal(0));
	}
	list BOtmp = tmpBOlist[1];
	intvec b_old = BO[3];	
	list DList = tmpBOlist[2];
	int btmp = size(DList);
	ideal center = DList[btmp];
	BOtmp[3][1] = btmp;
	CoeffBOList[1] = BOtmp;
	intvec b;
	b[1] = btmp;	
	int counter = 1;
	intvec BO7new;
	intvec BO7old = BO[7];
	
	
	int orderdecreased = 0;
	if(b[1] == b_old[1]){
		BO7new[1] = BO7old[1];
	}	
	if(b[1] < b_old[1]){
		//BO7new[1] = size(BOtmp[4]);
		BO7new[1] = size(BOtmp[4]);
		orderdecreased = 1;
	}
	
	BOtmp[7] = BO7new;
	list E = inters_E(BOtmp);
	//if (chartnumber == 7){~;}
	CoeffBOList[1][2] = mstd(E[1]^b[1] + CoeffBOList[1][2])[2];
	BOtmp[2] = CoeffBOList[1][2];
	center = std(DList[btmp]+E[1]);
	
	list CoeffList;
	ideal Icontrol;
	ideal Iweak;
	list BOcontrol;
	int casenumber;
	while(descend_finished(center, btmp, CoeffBOList[size(CoeffBOList)]) == 0){	
		counter++;	
		
		CoeffList = Coeff(BOtmp,b[size(b)]);
		BOtmp = CoeffList[1];
		Icontrol = CoeffList[2];
		Iweak = BOtmp[2];
		BOcontrol = BOtmp;
		BOcontrol[2] = Icontrol;
		BOcontrol[3] = size(DeltaList(BOcontrol));
		CoeffBOList[size(CoeffBOList)+1] = BOtmp;
		casenumber = IsMonomialCase(BOtmp,DList);
		
		if(casenumber == 2){
			//Intersection of basic objects (W,(\overline{J},b'),E) \cap (W,(J,b),E) =  (W,(\overline{J}^b+J^{b'},bb'),E) 
			BOtmp[2] = mstd(BOtmp[2]^BOcontrol[3] + BOcontrol[2] ^b[size(b)])[2];
			BOtmp[3] = b[size(b)] * BOcontrol[3];	
		}


					
		// Erst Deltalist und b berechnen, dann schneiden dann coeff berechnen!!!!
		DList = DeltaList(BOtmp);
		btmp = size(DList);		
		b[size(b)+1]  = btmp;
		CoeffBOList[counter][3][counter] = btmp;

		if(orderdecreased == 0 and (size(b_old) >= counter)){ 
			if(b[counter] == b_old[counter]){
				if(size(BO7old) >= counter){
					BO7new[counter] = BO7old[counter];
				}else{print("fehler");~;}
			}
		
			if(b[counter] < b_old[counter]){						
				//BO7new[counter+1] = size(BOtmp[4]);						//too many intersections but not a problem
				orderdecreased = 1;
				BO7new[counter] = size(BOtmp[4]);		
			}else{
				BO7new[counter] = BO7old[counter];}
		} else{
			BO7new[counter] = 0;
		}

		BOtmp[7][1] = BO7new[counter];
		if(casenumber == 1 or casenumber == 2){	
			E = inters_E(BOtmp);
			CoeffBOList[counter][2] = mstd(E[1]^b[counter] + CoeffBOList[counter][2])[2];
			BOtmp[2] = CoeffBOList[counter][2];
			center = std(DList[btmp]+E[1]);
		}
		if(casenumber == 3){
			BOcontrol = BOtmp;
			BOcontrol[2] = Icontrol;
			//BOcontrol[3] = size(DeltaList(BOcontrol));
			BOcontrol[3] = CoeffBOList[counter-1][3];
			center = monomialCase(BOcontrol,DList);
			//center = std(center + E[1]);
		}
	}
	
	center = std(radical(center));
	if(EqualityOfIdeal(center, BO[2])){					
		center = 1;
	}

	//reset BO7 and b in all levels of descend in dimension:
	for(j=1;j<=size(BO7new);j++){
		CoeffBOList[j][7] = intvec(BO7new[j..size(BO7new)]);
	}
	for(j=1;j<=size(b);j++){
		CoeffBOList[j][3] = b;
//		for(k=1;k<=size(b);k++){	
//			CoeffBOList[j][3][k] = b[k];
//		}
	}

	return(CoeffBOList,b,center,Icontrol,Iweak);						
}





proc descend_finished(ideal ctemp, int btmp, list CoeffBO) 
"USAGE: descend_finished(list CoeffBO); requires the last coefficient basic object as input 
RETURN: 0, if the descend is not finished, 1 if the potential center  is a point, 2 if the input was zero, 3 if the correct center was calculated in the step before, 4 if the potential center is smooth and snc with the exceptional divisors
EXAMPLE: no example  
"{	


	if(EqualityOfIdeal(CoeffBO[2],0) == 1){					// input was zero
		return(2);
	}
	if(EqualityOfIdeal(CoeffBO[2],1) == 1){					// correct center was calculated in the step before
		return(3);
	}
	if(isSmooth(ctemp) == 1  && normalCross(ctemp,CoeffBO[4]) == 1){		//isSmooth passt noch nicht!!!	// isSmooth(C) and snc(C,E);
		return(4);
	}
	ctemp = std(radical(ctemp));
	if(isSmooth(ctemp) == 1  && normalCross(ctemp,CoeffBO[4]) == 1){
		return(5);
	}
	return(0);												// not finished
}

proc IsMonomialCase(list BO, list DList){		//Change to: detectCase und return 1,2,3 like in BEV
 	int b = size(DeltaList(BO));
 	//Situation 1:
 	if(b >= factorial(size(DList))){
		return(1);
	}
	 //Situation 2: 
 	if(1 < b and b < size(DList)){
		return(2);
	}
 	
	//Monomial case: // eigentlich reicht hier direkt ein else return(3)
	if(EqualityOfIdeal(BO[2],1) == 1){
		return(3);
	}	
	ideal J = DList[size(DList)];
	int sizeJ = size(J);
	if(sizeJ == 1){					// only one generator
		if(size(J[1]) == 1){		//the single generator is a monomial
			return(3);	
		}
	} 
}

//TODO: Change the names of the different lists!!!
proc monomialCase(list BO, list DList)
"USAGE: monomialCase(list BO, list DList); requires that DList.last is generated by a single monomial 
RETURN: the center of the next blow up with respect to the monomial case of BEV
EXAMPLE: no example
"{				//requires that DList.last is generated by a single monomial 
	def r = basering;
	int n = nvars(r);
	int j,k,l;
	
	int b = BO[3][1]; 				
	
	ideal J = std(reduce(BO[2],BO[1]));
	list Explist = leadexp(J[1]);
	list retListtmp;
	retListtmp[1] = list();
	list tmplist;

	for (j=1; j<= n;j++){
		retListtmp[1][j] = Explist[1][j]; 
	}
//TODO: use removeDuplicates method of hualgorithm.lib 
	if (SumList(retListtmp[1]) > b ){
		for(l = 1; l<= n;l++){														//im schlimmsten fall n-mal ausnullen
			for(k=1;k<=size(retListtmp);k++){										//in jeder Liste
				for(j=1; j<= n;j++){												//nulle eintrag j aus, sofern notwendig
					if(retListtmp[k][j] != 0){
						if(SumList(retListtmp[k]) >= (b + retListtmp[k][j])){			//entry [k][j] superfluent
							tmplist = retListtmp[k];
							tmplist[j] = 0;
							retListtmp[size(retListtmp)+1] = tmplist;
						}
					}
				}
			}
		}
	} else{		//only one unique center is possible
		ideal center;
		for(j=1; j<=size(retListtmp[1]); j++){
			if(retListtmp[1][j] != 0){
				center[j] = var(j);
			}
		}
		//add ambient space to center
		center = center + BO[1];
		return(center);
	}

	//Delete entries of not minimal codimension:
	list retList = list();
	int minCodim = NumbNotZeroEntries(retListtmp[1]);
	
	for(k = 2; k<= size(retListtmp); k++){
		if(NumbNotZeroEntries(retListtmp[k]) == minCodim){
			retList[size(retList)+1] = retListtmp[k];
		}
		if(NumbNotZeroEntries(retListtmp[k]) < minCodim){
			minCodim = NumbNotZeroEntries(retListtmp[k]);
			retList = list();
			retList[1] = retListtmp[k];
		}
	}

	//Only keep the ones with maximal exponents:
	int maxsum;
	list tmplist2;
	for (k = 1;k<=size(retList); k++){
		if(SumList(retList[k]) == maxsum){
			tmplist2[size(tmplist2)+1] = retList[k];
		}
		if(SumList(retList[k]) > maxsum){
			maxsum = SumList(retList[k]);
			tmplist2 = list();
			tmplist2[1] = retList[k];
		}
	}
	//calculate indexlists for l(\xi) in the monomial case of Villamayor
	list indexlists = CreateIndexListsMonomialcase(tmplist2);
	// berechne k, welches lexikographisch maximal unter den indexlisten ist
	list smallestlist = indexlists[1];
	int currentindex = 1;
	for(k=2;k<= size(indexlists);k++){
		smallestlist = smallerList(indexlists[k],smallestlist[1]);
		if(smallestlist[2] == 1){
			currentindex = k;
		}
	}
	//in indexlists the entry currentindex is the minimal entry, so tmplist[currentindex] is the minimal leadexp
	// transformiere anschließend zurück zu k-ter irreduzibler komponente, welche dem Zentrum entspricht!
	ideal center;
	for(j=1; j<=size(indexlists[currentindex]); j++){
		if(indexlists[currentindex][j] != 0){
			center[j] = var(j);
		}
	}

	//add ambient space to center
	center = center + BO[1];
	
	return(center);
}


proc CreateIndexListsMonomialcase(list L){ 		//retlist[k] corresponds to L[k]!
	def r = basering;
	int n = nvars(r);
	int j,k;
	list retlist = list();
	
	for(k = 1;k<=size(L);k++){
		retlist[k] = list();
		for(j=1;j<=n;j++){
			if(L[k][j] != 0){
				retlist[k][size(retlist[k])+1] = j;
			}
		}
	}
	return(retlist);	
}


proc SumList(list L){
	int sum = 0;
	int i;
	for(i=1;i<=size(L);i++){
		sum = sum + L[i];
	}
	return(sum);
}

proc NumbNotZeroEntries(list L){
	int counter = 0;
	int i;
	
	for(i=1; i<=size(L); i++){
		if(L[i] != 0){
			counter++;
		}
	}
	return(counter);
}


proc smallerList(list L1, list L2){
	int i;
	int minsize = min(size(L1),size(L2));
	for (i = 1;i<= minsize; i++){
		if(L1[i] < L2[i]){
			return(L1,1);
		}
		if(L2[i] < L1[i]){
			return(L2,2);
		}
	}
	if(size(L1) < size(L2)){
		return(L1,1);
	}
	return(L2,2);
}


proc isSmooth(ideal J)		//via slocus
"USAGE: isSmooth(list BO); checks whether BO[2] is smooth 
RETURN: 1, if it is smooth, 0 otherwise
EXAMPLE: no example
"
{				
	return(deg(std(slocus(J))) == 0);
}


//Blowing up each of the data and mapping each of it into new successor ring:
proc SuccessorsCharts(list BO, ideal cent, int chartnumber)
"USAGE: SuccessorsCharts(list BO, ideal cent, int chartnumber); Basic object BO, center cent and the number of the current chart chartnumber
RETURN: a list of successor charts with the corresponding data
EXAMPLE: example SuccessorsCharts; shows an example
"
{	
	int i,j,k,n;

	def r = basering;
	list successor_list = list();
	successor_list = blowUpBO(BO,cent,2);
	int Numb_sucessors = size(successor_list);
	
	

	// construct successorlist
	for(j = 1;j<=Numb_sucessors; j++){
		if(defined(newring)){kill newring;}
		def newring = successor_list[j];
		setring(newring);
		n = nvars(basering);
		//tmp_n = n;
		ideal bM=BO[5];	//aus resolve.lib abgeschrieben
		map BlowUpMap = r,bM;

		ideal last_map = bM;
		def path = imap(r,path);
		path=path,[chartnumber,j];
		export(path);
		export(last_map);
	}

	setring(r);
	
	if(defined(newring)){kill newring;}	
	return(successor_list);
}




//little changes from the original one, since the data representation differs a little bit:
proc ResTreeBinomial(list re, list #)
"USAGE:  ResTree(L[,name][,mark]);
@*       L = list

@*       name = string
@*       mark = intvec
ASSUME:  - L is the output of 'resbinomial2'

@*       - write permission in the current directory or in the
@*         directory in which the file with name 'name' resides
@*       - mark intvec of size size(L[2])
@*            mark[i]=0 (default) border of box black
@*            mark[i]=1 border of box red
CREATE:  file 'name.jpg' containing the tree of charts of L
@*       if filename is given
NOTE:    only available on UNIX-type systems and programs
@*       'display' (imagemagick package) and 'dot' (Graphviz package) need to
@*       be in the standard search PATH
RETURN:  nothing, only generating graphics output in separate window
EXAMPLE: not available (for technical reasons)
"
{
//-----------------------------------------------------------------------------
// Initialization and definition of the temporary filename
//-----------------------------------------------------------------------------
  int i,j,dimC,jsave;
  string tempstr;
  def R=basering;

  if(!defined(@rot))
  {
     intvec @rot;
     @rot[size(re)] = 0;
     //@rot[size(re[1])]=0;
  }
  string @filename = "Testfaelle/baum_binomial";
  link eing=":w Testfaelle/baum_binomial";
//----------------------------------------------------------------------------
// writing the input to the program dot into a file
//----------------------------------------------------------------------------
write(eing,"graph G{");
  tempstr="1[shape=box,label=\"chart 1\"];";
  write(eing,tempstr);
  for(i=2;i<=size(re[1]);i++)
  {
     tempstr=string(i)+"[shape=box,label=\"chart " + string(i)
            //+ "\\nE:"+string(simplify(boundary[1],2))
            + " \"";
     if(@rot[i]==1)
     {
        tempstr=tempstr + "color=\"red\"];";
     }
     else
     {
        tempstr=tempstr + "];";
     }
     write(eing,tempstr);
  }
  //for(i=2;i<=size(re[1]);i++)
  for(i=2;i<=size(re);i++)
  {
     def S = re[i];
     //def S=re[1][i];
     setring S;
     j=int(leadcoef(path[1,ncols(path)]));
     if(j!=jsave)
     {
		def T = re[j];
        //def T=re[1][j];
        setring T;
        if(defined(Center_of_this_chart)){
			dimC=dim(std(IZ+Center_of_this_chart));
		} else{
			dimC = dim(std(BO[1]));
		}
        
        
        setring S;
        kill T;
     }
     setring R;
     kill S;
     if(j!=jsave)
     {
        tempstr=string(j) + "--" + string(i) +"[label=\"d=" + string(dimC)
               + "\"];";
        jsave=j;
     }
     else
     {
       tempstr=string(j) + "--" + string(i) +";";
     }
     write(eing,tempstr);
  }
  write(eing,"}");
  close(eing);
//---------------------------------------------------------------------------
// Create the graphics output using the programs dot and display
//---------------------------------------------------------------------------
  string outfile=@filename + ".jpg";
  if(!find(outfile,"/"))
  {
//--- display needs fully qualified path to file
     outfile=system("getenv","PWD") + "/" + outfile;
  }
  j=system("sh", "dot -Tjpg " + @filename + " -o "+ outfile);
  j=system("sh","display " + outfile + "&");
//---------------------------------------------------------------------------
// Clean up public directories if necessary
//---------------------------------------------------------------------------
  "Currently showing graphics in separate window";
  "Press <Return> to continue";
  pause();
  if(find(@filename,"/tmp/"))
  {
//--- do not leave any garbage in the public directories
    j=system("sh","command rm " + @filename + ".jpg "+ @filename);
  }
  return();
}
/////////////////////////////////////////////////////////////////////////////
